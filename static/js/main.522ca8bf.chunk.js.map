{"version":3,"sources":["api.js","Lists.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseUrl","headers","timeout","useStyles","makeStyles","root","box","width","container","display","flexWrap","flexDirection","justifyContent","ul","borderRadius","background","padding","margin","li","color","Lists","classes","useState","rows","setRows","getRows","start","end","a","get","then","res","data","forEach","row","console","log","useEffect","length","Container","className","map","line","List","key","toString","component","number","column","ListItem","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iUAeeA,E,OAbHC,EAAMC,OAAO,CACxBC,QAAQ,oCACPC,QAAS,CACP,eAAgB,iCAChB,8BAA+B,KAElCC,QAAQ,MCFHC,EAAYC,YAAW,CAC5BC,KAAK,GAGLC,IAAI,CACHC,MAAM,UAEPC,UAAW,CAGVC,QAAQ,OACRC,SAAS,OACTC,cAAe,MACfC,eAAe,gBAEhBC,GAAI,CACHC,aAAc,MACdC,WAAY,UACZN,QAAQ,OACRO,QAAQ,MACRC,OAAQ,aACRV,MAAM,SAEPW,GAAI,CACHC,MAAO,OACPH,QAAU,UACVJ,eAAe,YA6DFQ,MAxDf,WACC,IAAMC,EAAUlB,IADA,EAEQmB,mBAAS,IAFjB,mBAETC,EAFS,KAEHC,EAFG,cAkBDC,EAlBC,gFAkBhB,WAAuBC,EAAOC,GAA9B,SAAAC,EAAA,sEACO/B,EAAIgC,IAAJ,+BAAgCH,EAAhC,gBAA6CC,IACjDG,MAAK,SAAAC,GAAG,OAAKA,EAAIC,KAAKC,SAAQ,SAAAC,GAAG,OAAIV,GAAQ,SAAAD,GAAI,4BAAQA,GAAR,CAAcW,aAFlE,OAICC,QAAQC,IAAIvC,GAJb,4CAlBgB,sBAgChB,OANAwC,qBAAU,WAETF,QAAQC,IAAIb,GACZY,QAAQC,IAAIb,EAAKe,UACf,IAGF,kBAACC,EAAA,EAAD,KACA,kBAACA,EAAA,EAAD,CAAWC,UAAWnB,EAAQf,KAC9B,kBAACiC,EAAA,EAAD,CAAWC,UAAWnB,EAAQb,WAC5Be,EAAKkB,KAAI,SAACP,EAAKQ,GAAN,OACT,kBAACC,EAAA,EAAD,CAAMH,UAAWnB,EAAQR,GAAI+B,IAAKF,EAAKG,WAAYC,UAAU,OAC3DZ,EAAIO,KAAI,SAACM,EAAQC,GAAT,OACR,kBAACC,EAAA,EAAD,CACCL,IAAKI,EAAOH,WACZL,UAAWnB,EAAQH,IAGlB6B,YAOL,kBAACG,EAAA,EAAD,CAAQC,QA3CV,WACsB,IAAhB5B,EAAKe,OACTb,EAAQF,EAAKe,OAAQf,EAAKe,OAAS,IAGpCb,EAAQF,EAAKe,OAAO,EAAGf,EAAKe,OAAS,MAsCpC,kBC5EiBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.522ca8bf.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n\tbaseUrl:\"https://nrn-backend.herokuapp.com\",\n  headers: {\n    'Content-Type': 'application/json;charset=utf-8',\n    'Access-Control-Allow-Origin': '*',\n  },\n\ttimeout:60000\n\n});\n\n// api.defaults.timeout = 60000;\n// api.defaults.pfoxy.host = \"https://nrn-backend.herokuapp.com\"\n\nexport default api;\n","import React, { useEffect, useState } from \"react\";\n// import Papa, { readString, read } from 'papaparse';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { List, ListItem, Container, Button } from \"@material-ui/core\";\nimport api from \"./api\";\n\nconst useStyles = makeStyles({\n\troot:{\n\t\t// height:'300px'\n\t},\n\tbox:{\n\t\twidth:\"2000px\"\n\t},\n\tcontainer: {\n\t\t// background: \"#1e1e1e\",\n\t\t// padding : \"1em\",\n\t\tdisplay:'flex',\n\t\tflexWrap:'wrap',\n\t\tflexDirection :'row',\n\t\tjustifyContent:'space-evenly',\n\t},\n\tul: {\n\t\tborderRadius: \"8px\",\n\t\tbackground: \"#31313A\",\n\t\tdisplay:'flex',\n\t\tpadding:'1em',\n\t\tmargin :\"8px 0 0 0 \",\n\t\twidth:'500px',\n\t},\n\tli: {\n\t\tcolor: \"#fff\",\n\t\tpadding : \"0 0 0 0\",\n\t\tjustifyContent:'center'\t\n\n\t}\n});\n\nfunction Lists() {\n\tconst classes = useStyles();\n\tconst [rows, setRows] = useState([]);\n\n\tfunction getCombinations(start, end){\n\n\t}\n\n\tfunction handleClick() {\n\t\tif ( rows.length === 0 ){\n\t\t\tgetRows(rows.length, rows.length + 20);\n\t\t}\n\t\telse{\n\t\tgetRows(rows.length+1, rows.length + 19);\n\t\t}\n\t\t// getCombinations(10,20);\n\t}\n\n\tasync function getRows(start, end) {\n\t\tawait api.get(`/listar?f=None&start=${start}&end=${end}`)\n\t\t\t.then(res =>  res.data.forEach(row => setRows(rows => [...rows, row])));\n\t\t\n\t\tconsole.log(api);\n\t}\n\n\n\tuseEffect(() => {\n\t// getRows(0,20)\n\t\tconsole.log(rows);\n\t\tconsole.log(rows.length)\n\t}, []);\n\n\treturn (\n\t\t<Container>\n\t\t<Container className={classes.box}>\n\t\t<Container className={classes.container}>\n\t\t\t{rows.map((row, line) => (\n\t\t\t\t<List className={classes.ul} key={line.toString()} component='div'>\n\t\t\t\t\t{row.map((number, column) => (\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\tkey={column.toString()}\n\t\t\t\t\t\t\tclassName={classes.li}\n\t\t\t\t\t\t// button={true}\t\t\t\t\t\t\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{number}\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t))}\n\t\t\t\t</List>\n\t\t\t))}\n\t\t</Container>\n\t\t</Container>\n\t\t\t<Button onClick={handleClick}>Mostre mais!</Button>\n\t\t</Container>\n\t);\n}\n\nexport default Lists;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Lists from './Lists';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <Lists></Lists>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}